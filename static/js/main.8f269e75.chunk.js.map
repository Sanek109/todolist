{"version":3,"sources":["components/TodoListFooter/TodoList.module.css","components/TodoListTasks/TodoListTask/TodoListTask.module.css","components/TodoListTasks/TodoListTask/TodoListTask.jsx","components/TodoListTasks/TodoListTasks.jsx","store/reducerFooter.js","components/TodoListFooter/TodoListFooter.jsx","components/TodoListHeader/TodoListTitle.jsx","components/TodoListHeader/AddNewItemForm.jsx","store/reducerTodolist.js","components/TodoList.js","App.js","serviceWorker.js","store/store.js","index.js"],"names":["module","exports","TodoListTask","props","state","editMode","activateEditMode","setState","deactiveteEditMode","onIsDoneChanged","e","changeStatus","task","id","currentTarget","checked","onTitleChanged","changeTitle","title","value","deleteTaskTodolist","deleteTask","render","classForCheckbox","isDone","className","type","onChange","onBlur","autoFocus","onDoubleClick","style","buttonDelete","onClick","React","Component","TodoListTasks","taskElements","tasks","map","initialState","isHidden","reducerFooter","action","TodoListFooter","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","classForAll","filterValue","classForCompleted","classForActive","spanMenu","onShowFiltersClick","onHideFiltersClick","connect","TodoListTitle","AddNewItemForm","isError","onAddItemClick","newText","addItem","deleteError","onAddItemKeyPress","key","classForError","ref","newTaskTitleRef","placeholder","onKeyPress","reducerTodolist","newTask","t","taskId","obj","filter","TodoList","nextTaskId","addTask","newFilterValue","changeTask","connectedTodoList","App","connectedApp","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8f269e75.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"spanMenu\":\"TodoList_spanMenu__gbeVX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonDelete\":\"TodoListTask_buttonDelete__2pA-g\"};","import React from 'react';\r\nimport style from './TodoListTask.module.css';\r\n\r\nclass TodoListTask extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    state = {\r\n        editMode: false\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactiveteEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n    }\r\n\r\n    onIsDoneChanged = (e) => {\r\n        this.props.changeStatus(this.props.task.id, e.currentTarget.checked);\r\n    }\r\n\r\n    onTitleChanged = (e) => {\r\n        this.props.changeTitle(this.props.task.title, e.currentTarget.value)\r\n    }\r\n\r\n    deleteTaskTodolist = (e) => {\r\n        this.props.deleteTask(this.props.task.id)\r\n    }\r\n\r\n    render = () => {\r\n        let classForCheckbox = this.props.task.isDone === true ? \"todoList-task\" : \"todoList-task done\";\r\n        return (\r\n            <div>\r\n                <div className={classForCheckbox} >\r\n                    <input type=\"checkbox\" checked={this.props.task.isDone} onChange={this.onIsDoneChanged} />\r\n                    {this.state.editMode\r\n                    ? <input onBlur={this.deactiveteEditMode} autoFocus={true} value={this.props.task.title} onChange={this.onTitleChanged} /> \r\n                    : <span onDoubleClick={this.activateEditMode}>{this.props.task.title}<button className={style.buttonDelete} onClick={this.deleteTaskTodolist}>x</button></span>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default TodoListTask;","import React from 'react';\r\nimport TodoListTask from './TodoListTask/TodoListTask';\r\n\r\nclass TodoListTasks extends React.Component {\r\n    render = () => {\r\n        let taskElements = this.props.tasks.map( task => <TodoListTask deleteTask={this.props.deleteTask} task={task} changeStatus={this.props.changeStatus}\r\n            changeTitle={this.props.changeTitle} /> )\r\n        return (\r\n            <div className=\"todoList-task\">\r\n                {taskElements}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default TodoListTasks;","const ON_SHOW_FILTERS_CLICK = 'ON_SHOW_FILTERS_CLICK';\r\nconst ON_HIDE_FILTERS_CLICK = 'ON_HIDE_FILTERS_CLICK';\r\n\r\nconst initialState = {\r\n    isHidden: false\r\n}\r\n\r\nconst reducerFooter = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ON_SHOW_FILTERS_CLICK:\r\n            return {\r\n                ...state,\r\n                isHidden: true\r\n            }\r\n\r\n        case ON_HIDE_FILTERS_CLICK:\r\n            return {\r\n                ...state,\r\n                isHidden: false\r\n            }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport const onShowFiltersClick = () => {\r\n    return {\r\n        type: 'ON_SHOW_FILTERS_CLICK'\r\n    }\r\n}\r\n\r\nexport const onHideFiltersClick = () => {\r\n    return {\r\n        type: 'ON_HIDE_FILTERS_CLICK'\r\n    }\r\n}\r\n\r\n\r\nexport default reducerFooter;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {onShowFiltersClick, onHideFiltersClick} from \"./../../store/reducerFooter\"\r\nimport style from './TodoList.module.css';\r\n\r\nclass TodoListFooter extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    onAllFilterClick = () => {\r\n        this.props.changeFilter('All')\r\n    }\r\n\r\n    onCompletedFilterClick = () => {\r\n        this.props.changeFilter('Completed')\r\n    }\r\n\r\n    onActiveFilterClick = () => {\r\n        this.props.changeFilter('Active')\r\n    }\r\n\r\n    render = () => {\r\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\r\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\r\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\r\n\r\n        return (\r\n            <div className=\"todoList-footer\">\r\n                {!this.props.isHidden && <div>\r\n                    <button onClick={ this.onAllFilterClick } className={classForAll}>All</button>\r\n                    <button onClick={ this.onCompletedFilterClick } className={classForCompleted}>Completed</button>\r\n                    <button onClick={ this.onActiveFilterClick } className={classForActive}>Active</button>\r\n                </div>}\r\n                {!this.props.isHidden && <span className={style.spanMenu} onClick={ this.props.onShowFiltersClick }>Hide Menu</span>}\r\n                {this.props.isHidden && <span className={style.spanMenu} onClick={ this.props.onHideFiltersClick }>Show Menu</span>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>  {\r\n    return {\r\n        isHidden: state.reducerFooter.isHidden\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {onShowFiltersClick, onHideFiltersClick})(TodoListFooter)\r\n","import React from 'react';\r\n\r\nclass TodoListTitle extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div className=\"todoList-header\">\r\n                <h3 className=\"todoList-header__title\">{this.props.title}</h3>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTitle;","import React from 'react';\r\n\r\nclass AddNewItemForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    state = {\r\n        isError: true,\r\n        title: ''\r\n    }\r\n\r\n    onAddItemClick = () => {\r\n        let newText = this.state.title;\r\n        this.state.title = '';\r\n        if(newText === '') {\r\n            this.setState ({\r\n                isError: true\r\n            })\r\n        } else {\r\n            this.setState ({\r\n                isError: false\r\n            })\r\n        }\r\n        this.setState ({\r\n            isError: true \r\n        })\r\n\r\n        this.props.addItem(newText);\r\n    }\r\n\r\n    deleteError = (e) => {\r\n        this.setState ({\r\n            isError: false,\r\n            title: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    onAddItemKeyPress = (e) => {\r\n        if (e.key === 'Enter') {\r\n            this.onAddItemClick();\r\n        }\r\n    }\r\n\r\n    render = () => {\r\n        let classForError = this.state.isError === true ? \"error\" : \"\";\r\n        return (\r\n            <div className=\"todoList-header\">\r\n                <div className=\"todoList-newTaskForm\">\r\n                    <input onChange={this.deleteError} \r\n                           ref={this.newTaskTitleRef} \r\n                           type=\"text\" placeholder=\"New item name\" \r\n                           className={classForError} \r\n                           onKeyPress={this.onAddItemKeyPress} \r\n                           value={this.state.title} />\r\n                    <button onClick={this.onAddItemClick}>Add</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddNewItemForm;","const ADD_TASK = 'ADD_TASK';\r\nconst CHANGE_TASK = 'CHANGE_TASK';\r\nconst DELETE_TASK = 'DELETE_TASK';\r\n\r\nconst initialState = {\r\n    title: 'My tasks!',\r\n    tasks: [\r\n        {id: 0, title: \"GitHub\", isDone: false},\r\n        {id: 1, title: \"Redux\", isDone: false},\r\n        {id: 2, title: \"React\", isDone: true}\r\n    ]\r\n}\r\n\r\nconst reducerTodolist = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks, action.newTask]\r\n            }\r\n        case CHANGE_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(t => {\r\n                    if (t.title != action.taskId && t.id != action.taskId) {\r\n                        return t;\r\n                    } else {\r\n                        return {...t, ...action.obj}\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case DELETE_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.filter(t => {\r\n                    if(t.id !== action.taskId ) {\r\n                        return  t;\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nexport const addTask = (newTask) => {\r\n    return {\r\n        type: \"ADD_TASK\",\r\n        newTask\r\n    }\r\n}\r\n\r\nexport const changeTask = (taskId, obj) => {\r\n    return {\r\n        type: CHANGE_TASK,\r\n        taskId,\r\n        obj\r\n    }\r\n}\r\n\r\nexport const deleteTask = (taskId) => {\r\n    return {\r\n        type: DELETE_TASK,\r\n        taskId\r\n    }\r\n}\r\n\r\nexport default reducerTodolist;","import React from 'react';\r\nimport '../App.css';\r\nimport TodoListTasks from './TodoListTasks/TodoListTasks';\r\nimport TodoListFooter from './TodoListFooter/TodoListFooter';\r\nimport TodoListTitle from './TodoListHeader/TodoListTitle';\r\nimport AddNewItemForm from './TodoListHeader/AddNewItemForm';\r\nimport {addTask, changeTask, deleteTask} from \"../store/reducerTodolist\";\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nclass TodoList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    state = {\r\n        filterValue: \"All\",\r\n    };\r\n\r\n\r\n    nextTaskId = 4\r\n\r\n\r\n    addItem = (newText) => {\r\n        let newTask = {\r\n            id: this.nextTaskId,\r\n            title: newText,\r\n            isDone: false,\r\n        }\r\n        this.props.addTask(newTask);\r\n        this.nextTaskId++;\r\n    }\r\n\r\n    changeFilter = (newFilterValue) => {\r\n        this.setState({\r\n            filterValue: newFilterValue\r\n        })\r\n    }\r\n\r\n    changeStatus = (taskId, isDone) => {\r\n        this.props.changeTask(taskId, {isDone: isDone});\r\n    }\r\n\r\n    changeTitle = (taskId, title) => {\r\n        this.props.changeTask(taskId, {title: title});\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"todoList\">\r\n                    <div className=\"todoList-header\">\r\n                        <TodoListTitle title={this.props.title}/>\r\n                        <AddNewItemForm addItem={this.addItem}/>\r\n                    </div>\r\n                    <TodoListTasks changeStatus={this.changeStatus} changeTitle={this.changeTitle}\r\n                                   deleteTask={this.props.deleteTask}\r\n                                   tasks={this.props.tasks.filter(t => {\r\n                                       if (this.state.filterValue === 'All') {\r\n                                           return true;\r\n                                       } else if (this.state.filterValue === 'Active') {\r\n                                           return t.isDone === false;\r\n                                       } else if (this.state.filterValue === 'Completed') {\r\n                                           return t.isDone === true;\r\n                                       }\r\n                                   })}/>\r\n                    <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst connectedTodoList = connect(null, {addTask, changeTask, deleteTask})(TodoList);\r\n\r\nexport default connectedTodoList;","import React from 'react';\nimport './index.css';\nimport TodoList from './components/TodoList';\nimport { connect } from 'react-redux';\n \nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render = () => {\n        return (\n            <div>\n                <div className=\"App\">\n                    <TodoList tasks={this.props.tasks} title={this.props.title} />\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        tasks: state.reducerTodolist.tasks,\n        title: state.reducerTodolist.title\n    }\n}\n\nconst connectedApp = connect(mapStateToProps, null)(App);\n\nexport default connectedApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\r\nimport reducerTodolist from \"./reducerTodolist\";\r\nimport reducerFooter from \"./reducerFooter\"\r\n\r\nlet reducers = combineReducers({\r\n    reducerTodolist,\r\n    reducerFooter\r\n})\r\n\r\nconst store = createStore(reducers);\r\n\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store/store'\n\nReactDOM.render(\n    <Provider store={store} >\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}